name: 'Reusable SW CI/CD Pipeline'

on:
  workflow_call:
    inputs:
      # Version configuration
      major-version:
        description: 'Major version number'
        required: false
        default: '1'
        type: string
      minor-version:
        description: 'Minor version number'
        required: false
        default: '0'
        type: string
      
      # .NET Build configuration
      dotnet-version:
        description: 'Dotnet version to use'
        required: false
        default: '8.0.x'
        type: string
      nuget-projects:
        description: 'NuGet projects to pack and push (glob pattern). Leave empty to skip NuGet publishing.'
        required: false
        default: ''
        type: string
      test-projects:
        description: 'Test projects to run (glob pattern)'
        required: false
        default: '**/*UnitTests/*.csproj'
        type: string
      run-tests:
        description: 'Whether to run tests'
        required: false
        default: 'false'
        type: string
      
      # Docker configuration
      dockerfile-path:
        description: 'Path to Dockerfile'
        required: false
        default: './Dockerfile'
        type: string
      docker-context:
        description: 'Docker build context'
        required: false
        default: '.'
        type: string
      docker-platforms:
        description: 'Target platforms for Docker build'
        required: false
        default: 'linux/amd64'
        type: string
      
      # Helm configuration
      chart-path:
        description: 'Path to Helm chart directory'
        required: false
        default: './chart'
        type: string
      chart-name:
        description: 'Helm chart name'
        required: true
        type: string
      
      # Deployment configuration
      deploy-to-development:
        description: 'Deploy to development environment'
        required: false
        default: true
        type: boolean
      development-namespace:
        description: 'Kubernetes namespace for development'
        required: false
        default: 'development'
        type: string
      
      # Registry configuration
      container-registry:
        description: 'Container registry (docker.io, ghcr.io, etc.)'
        required: false
        default: 'ghcr.io'
        type: string
      image-name:
        description: 'Docker image name (will use repository name if not provided)'
        required: false
        type: string
      
      # Deployment values
      helm-set-values:
        description: 'Additional Helm set values (comma-separated: key1=value1,key2=value2)'
        required: false
        type: string

    secrets:
      # NuGet secrets
      nuget-api-key:
        description: 'NuGet API key'
        required: false
      nuget-source:
        description: 'NuGet source URL'
        required: false
      
      # Container registry secrets
      registry-username:
        description: 'Container registry username'
        required: false
      registry-password:
        description: 'Container registry password/token'
        required: false
      
      # Kubernetes secrets
      kubeconfig:
        description: 'Base64 encoded kubeconfig'
        required: false
      
      # GitHub token for tagging
      github-token:
        description: 'GitHub token for tagging'
        required: false

    outputs:
      version:
        description: 'Generated semantic version'
        value: ${{ jobs.version.outputs.version }}
      docker-image:
        description: 'Built Docker image with tag'
        value: ${{ jobs.ci.outputs.docker-image }}
      helm-chart:
        description: 'Published Helm chart URL'
        value: ${{ jobs.ci.outputs.helm-chart }}

env:
  # Set default registry and image name
  CONTAINER_REGISTRY: ${{ inputs.container-registry }}
  IMAGE_NAME: ${{ inputs.image-name || github.repository }}

jobs:
  version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.semver.outputs.version }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Determine semantic version
        id: semver
        uses: simplify9/sw-workflows/actions/determine-semver@main
        with:
          major: ${{ inputs.major-version }}
          minor: ${{ inputs.minor-version }}
 
      - name: Tag new version on GitHub origin
        uses: simplify9/sw-workflows/actions/tag-github-origin@main
        with:
          github-token: ${{ secrets.github-token || secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          tag: ${{ steps.semver.outputs.version }}
          sha: ${{ github.sha }}

  nuget:
    runs-on: ubuntu-latest
    needs: version
    if: ${{ inputs.nuget-projects != '' }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dotnet Restore, Build, and Test
        uses: simplify9/sw-workflows/actions/dotnet-build@main
        with:
          projects: "**/*.csproj"
          test-projects: ${{ inputs.test-projects }}
          configuration: "Release"
          dotnet-version: ${{ inputs.dotnet-version }}
          run-tests: ${{ inputs.run-tests }}

      - name: Pack and Push NuGet Package
        uses: simplify9/sw-workflows/actions/dotnet-pack-push@main
        with:
          projects: ${{ inputs.nuget-projects }}
          configuration: "Release"
          version: ${{ needs.version.outputs.version }}
          api-key: ${{ secrets.nuget-api-key }}
          nuget-source: ${{ secrets.nuget-source || 'https://api.nuget.org/v3/index.json' }}

  ci:
    runs-on: ubuntu-latest
    needs: version
    outputs:
      docker-image: ${{ steps.docker.outputs.image-tags }}
      helm-chart: ${{ steps.helm.outputs.chart-url }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Build and push Docker image
        id: docker
        uses: simplify9/sw-workflows/actions/docker-build-push@main
        with:
          registry: ${{ env.CONTAINER_REGISTRY }}
          image-name: ${{ env.IMAGE_NAME }}
          version: ${{ needs.version.outputs.version }}
          username: ${{ secrets.registry-username || github.actor }}
          password: ${{ secrets.registry-password || secrets.GITHUB_TOKEN }}
          dockerfile: ${{ inputs.dockerfile-path }}
          context: ${{ inputs.docker-context }}
          platforms: ${{ inputs.docker-platforms }}

      - name: Package and push Helm chart
        id: helm
        uses: simplify9/sw-workflows/actions/helm-package-push@main
        with:
          chart-name: ${{ inputs.chart-name }}
          chart-path: ${{ inputs.chart-path }}
          version: ${{ needs.version.outputs.version }}
          registry: ${{ env.CONTAINER_REGISTRY }}
          repository: ${{ github.repository_owner }}/charts
          username: ${{ secrets.registry-username || github.actor }}
          password: ${{ secrets.registry-password || secrets.GITHUB_TOKEN }}
          image-repository: ${{ env.CONTAINER_REGISTRY }}/${{ github.repository }}
          image-tag: ${{ needs.version.outputs.version }}
          update-image-values: 'true'

  deploy-development:
    runs-on: ubuntu-latest
    needs: [version, ci]
    if: ${{ inputs.deploy-to-development }}
    environment: development
    steps:
      - name: Deploy to Development
        uses: simplify9/sw-workflows/actions/helm-deploy@main
        with:
          chart-name: ${{ inputs.chart-name }}
          chart-version: ${{ needs.version.outputs.version }}
          registry: ${{ env.CONTAINER_REGISTRY }}
          repository: ${{ github.repository_owner }}/charts
          registry-username: ${{ secrets.registry-username || github.actor }}
          registry-password: ${{ secrets.registry-password || secrets.GITHUB_TOKEN }}
          kubeconfig: ${{ secrets.kubeconfig }}
          release-name: ${{ inputs.chart-name }}-dev
          namespace: ${{ inputs.development-namespace }}
          set-values: ${{ inputs.helm-set-values || '' }}
          timeout: '1m'
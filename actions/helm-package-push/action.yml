name: 'Helm Chart Package and Push'
description: 'Package and push Helm chart to OCI registry'
author: 'Simplify9'

inputs:
  chart-path:
    description: 'Path to the Helm chart directory'
    required: false
    default: './chart'
  chart-name:
    description: 'Name of the Helm chart (used for packaging filename)'
    required: true
  version:
    description: 'Chart version and appVersion'
    required: true
  registry:
    description: 'OCI registry URL (e.g., docker.io, registry.digitalocean.com, harbor.example.com)'
    required: false
    default: 'docker.io'
  repository:
    description: 'Repository path in the registry (e.g., simplify9/charts, my-org/helm-charts)'
    required: true
  username:
    description: 'Registry username'
    required: true
  password:
    description: 'Registry password or token'
    required: true
  update-chart-yaml:
    description: 'Update Chart.yaml with version and appVersion'
    required: false
    default: 'true'
  package-destination:
    description: 'Directory to store packaged charts'
    required: false
    default: './helm-packages'
  helm-version:
    description: 'Helm version to install'
    required: false
    default: 'latest'
  image-repository:
    description: 'Docker image repository to set in values.yaml'
    required: false
  image-tag:
    description: 'Docker image tag to set in values.yaml'
    required: false
  update-image-values:
    description: 'Update image repository and tag in values.yaml'
    required: false
    default: 'false'

outputs:
  chart-package:
    description: 'Path to the packaged chart file'
    value: ${{ steps.package.outputs.package-path }}
  chart-url:
    description: 'OCI URL where the chart was pushed'
    value: ${{ steps.push.outputs.chart-url }}

runs:
  using: 'composite'
  steps:
    - name: Set up Helm
      uses: azure/setup-helm@v4
      with:
        version: ${{ inputs.helm-version }}

    - name: Create package destination directory
      shell: bash
      run: |
        mkdir -p ${{ inputs.package-destination }}

    - name: Update Chart.yaml versions
      if: inputs.update-chart-yaml == 'true'
      shell: bash
      run: |
        echo "Updating Chart.yaml with version: ${{ inputs.version }}"
        sed -i "s/^version:.*/version: ${{ inputs.version }}/" ${{ inputs.chart-path }}/Chart.yaml
        sed -i "s/^appVersion:.*/appVersion: ${{ inputs.version }}/" ${{ inputs.chart-path }}/Chart.yaml
        
        echo "Updated Chart.yaml content:"
        cat ${{ inputs.chart-path }}/Chart.yaml

    - name: Update values.yaml image configuration
      if: inputs.update-image-values == 'true'
      shell: bash
      run: |
        VALUES_FILE="${{ inputs.chart-path }}/values.yaml"
        
        if [ -n "${{ inputs.image-repository }}" ]; then
          echo "Updating image repository to: ${{ inputs.image-repository }}"
          if grep -q "^image:" "$VALUES_FILE"; then
            # Update existing image.repository
            sed -i "/^image:/,/^[[:space:]]*repository:/ s|repository:.*|repository: ${{ inputs.image-repository }}|" "$VALUES_FILE"
          else
            echo "Warning: image.repository not found in values.yaml"
          fi
        fi
        
        if [ -n "${{ inputs.image-tag }}" ]; then
          echo "Updating image tag to: ${{ inputs.image-tag }}"
          if grep -q "^image:" "$VALUES_FILE"; then
            # Update existing image.tag
            sed -i "/^image:/,/^[[:space:]]*tag:/ s|tag:.*|tag: \"${{ inputs.image-tag }}\"|" "$VALUES_FILE"
          else
            echo "Warning: image.tag not found in values.yaml"
          fi
        fi
        
        if [ "${{ inputs.update-image-values }}" == "true" ]; then
          echo "Updated values.yaml image section:"
          sed -n '/^image:/,/^[^[:space:]]/p' "$VALUES_FILE" | head -n -1
        fi

    - name: Package Helm chart
      id: package
      shell: bash
      run: |
        echo "Packaging Helm chart from ${{ inputs.chart-path }}"
        helm package ${{ inputs.chart-path }} --destination ${{ inputs.package-destination }}/
        
        PACKAGE_FILE="${{ inputs.package-destination }}/${{ inputs.chart-name }}-${{ inputs.version }}.tgz"
        echo "package-path=${PACKAGE_FILE}" >> $GITHUB_OUTPUT
        
        echo "Packaged chart: ${PACKAGE_FILE}"
        ls -la ${{ inputs.package-destination }}/

    - name: Configure Helm registry authentication
      shell: bash
      run: |
        echo "Configuring Helm registry authentication for ${{ inputs.registry }}"
        if [ "${{ inputs.registry }}" != "docker.io" ]; then
          helm registry login ${{ inputs.registry }} -u ${{ inputs.username }} -p ${{ inputs.password }}
        else
          helm registry login -u ${{ inputs.username }} -p ${{ inputs.password }}
        fi

    - name: Push Helm chart to registry
      id: push
      shell: bash
      run: |
        PACKAGE_FILE="${{ inputs.package-destination }}/${{ inputs.chart-name }}-${{ inputs.version }}.tgz"
        
        if [ "${{ inputs.registry }}" != "docker.io" ]; then
          CHART_URL="oci://${{ inputs.registry }}/${{ inputs.repository }}"
        else
          CHART_URL="oci://${{ inputs.repository }}"
        fi
        
        echo "Pushing chart to: ${CHART_URL}"
        helm push "${PACKAGE_FILE}" "${CHART_URL}"
        
        echo "chart-url=${CHART_URL}/${{ inputs.chart-name }}:${{ inputs.version }}" >> $GITHUB_OUTPUT

    - name: Output chart information
      shell: bash
      run: |
        echo "### ⚙️ Helm Chart Summary" >> $GITHUB_STEP_SUMMARY
        echo "- **Chart Name:** ${{ inputs.chart-name }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Version:** ${{ inputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Registry:** ${{ inputs.registry }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Repository:** ${{ inputs.repository }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Package:** ${{ steps.package.outputs.package-path }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Chart URL:** ${{ steps.push.outputs.chart-url }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Installation Command:**" >> $GITHUB_STEP_SUMMARY
        echo '```bash' >> $GITHUB_STEP_SUMMARY
        echo "helm install my-release ${{ steps.push.outputs.chart-url }}" >> $GITHUB_STEP_SUMMARY
        echo '```' >> $GITHUB_STEP_SUMMARY